1) Работа в командной строке и использование команд с правильным синтаксисом
Умение пользоваться man
Пример описание: ls [option]... [file]...
[option] это ключи, [file] это объект, ... означает, что можно перечислять ключи и объекты

CAL - вызов календаря из cli
квадратные скобки указывают порядок чтения параметров(в первых скобках первый параметр)

& - используется для выполнения последовательно нескольких команд,
либо для запуска команды в фоновом режиме.
При использовании одиночного амперсанда, даже если команда не выполняется,
запускаются следующие команды.
Если вы хотите, чтобы второе задание / команда ожидало завершения первого задания /
команды, используйте символ && между командами. Не работают следующие команды,
если предыдущая не выполнилась.

2) Перенаправление ввода-вывода (>, >>, |, 2>, etc.)
stdin - ввод, stdout - вывод, stderr - вывод ошибок
> - перезапись
>> - дописывать в файл
2> - записать ошибку в файл
2>> - дописать ошибку в файл
&> - перенаправление стандартного потока и потока ошибок вместе в один файл!!!
2>&1 - вывод ошибок на стандартный вывод, позволяет передать вывод на |
| - передача вывода следующей команде, используется только со стандартным выводом
(с выводом ошибок не работает)
< - перенаправление ввода, например mysql -u root db_name < new_db_name.sql
head - первые 10 строк файла(ключ -n [количество строк])
tail - последние 10 строк файла(ключ -n [количество строк])
tail -f позволяет наблюдать за изменением файла в режиме реального времени

3) Grep и регулярные выражения для анализа текста
grep '^#' /etc/ssh/ssg_config ищет все строки начинающиеся с #
grep -i 'rsa' /etc/ssh/ssh_config ищет без учета регистра
grep -v показывает обратный результат(строки где не учитывается наш шаблон поиска)
^ указывает на поиск в начале строки
$ после слова указывает на поиск строк которые заканчиваются на это слово ('world$')
grep '[Ll]inux' file ищет строки с заглавной и строчной Ll
grep -E '(a)+' file выведет строки где буква а повторяется один или более раз
grep 'l...x' file - точка означает любой символ

4) Удаленный доступ через SSH
Подключаться можно через логин и пароль, либо пару ключей
Конфиг sshd лежит в /etc/ssh/sshd_config (посмотреть параметры)
ssh test@server2 ls выполняет команду без установления постоянного подключения
scp, sftp разобраться с функционалом и синтаксисом

5) Логин-оболочка и смена пользователя
systemctl get-default выводит имя таргет юнита по умолчанию
Таргет-юнит - это савокупность программ и сервисов, которые загружаются,
когда вы переходите к данному таргет юниту.

su имя_пользователя переключает на нужного пользователя, вы получаете его права,
но не получаете параметры пользовательской конфигурации (переменные окружения)

2 вида оболочек:
1) интерактивная - cli, где вводим команды
2) Логин оболочка - используется для работы с параметрами конфигурации и переменными окружения
history - список вводимых команд
ctrl+r поиск в истории вводимых команд
$PATH - список папок, где находятся исполняемые файлы(указывается в настройках bash)
.bash_profile выполняется только при переходе к логин оболочке
.bashrc выполняется при переходе и в логин и в интерактивную оболочку

su - login - переключает пользователя в его логин оболочку

/etc/profile содержит команды и переменные для всех пользователей системы

6) Архивирование tar, star, gzip, and bzip2
gzip сжимает только файлы
gunzip или gzip -d извлекает файлы
tar -cvf archive.tar file1 file2 directory1/ ....
-c - создать
-x - извлекать
-v - verbose просмотреть список архивированых файлов
-f - указать имя архива
-tf - список файлов в готовом архиве
-z - использовать gzip
tar перезаписывает файлы  при извлечении
gzip -l выводит информацию о сжатом файле

star - не установлена по умолчанию, используется для работы с большими файлами
и для контроля изменения файлов при распаковке
star -c -f=archive.tar directory1 file1 file2
-c - создать архив
-x извлечь файлы
позволяет указать конкретные файлы для извлечения.
-cz - автоматическое сжатие архива

7) Создание и редактирование текстовых файлов
потренироваться в nano, vi, vim

8) Работа с файлами и директориями
touch - команда для изменения времени доступа к файлам
так же используется для создания файлов

mkdir -p dir1/dir2/dir3 создает директории и поддиректории
tree - выводит структуру папок и файлов
rmdir - удаляет только пустые директории
rm -rf - удаляет все
mv - перемещает и переименовывает
cp - копирует
-r - рекурсивно копировать
rm - аллиас rm -i (просит подтверждения)
все алиасы в конфигах bash


9) Жесткие и символические ссылки
ln -s file link_file создает символическую ссылку на file
Символическая ссылка служит для перенаправления к файлу, их может быть сколько угодно много
Ссылка и файл имеют разные inode, то есть ссылка это отдельный файл, который ссылается
на другой файл.
Ссылки имеют права доступа 777, но при этом не дают разрешения редактировать этот файл,
если на него стоят иные права доступа.
ln /root/file2 hardlink_file2 - создает жесткую ссылку
файл и ссылка имеют одинаковый inode(индексный дескриптор)
Что такое иноды (inodes)

Inode (дальше — инода) — это сокращение от «index node» — по-русски — индексный узел.
Математически он представляет собой структуру данных описания (дескриптор) файла и является базисным понятием,
на котором основаны многие юниксные и линуксные файловые системы. Иноды подобны каталогу базовой академической
библиотеки, в каком находится информация, связывающая «название-автор книжек» с их физическим
местонахождением — комната хранилища, стеллаж, полка.

Другими словами, иноды — это данные о данных либо метаданные, как обычно говорят айтишники.

Linux иноды содержит довольно много метаданных:
    размер файла (в байтах)
    идентификатор (ID) устройства, содержащего файл
    ID пользователя-владельца файла ID группы юзеров, к которой принадлежит обладатель
    права доступа, присвоенные обладателю, группе и т.н. «другим»
    права чтения, модификации и выполнения для обладателя, группы и других
    таймштампы моментов последнего доступа и конфигурации файла
    счетчик количества жестких ссылок на файл (если он не нулевой, то файл нереально удалить)
    указатели на блоки (кластеры) диска, в каких расположен файл
    имя папки либо блочного устройства, где размещен файл
    размер блока файловой системы (ФС) раздела, в каком находится файл
    количество блоков, занимаемых файлом

Что не хранится в inodes:
Инода не содержит время создания файла и его имени. Это атрибуты таблицы директориев (directory table).
Когда юзер пробует получить к файлу доступ, происходит последующее:
— по названии файла в таблице директориев определяется соответственный ему номер иноды,
— по номеру иноды происходит воззвание к Inode table и считываются метаданные,
начинается работа с файлом, если это может быть.

В файловых системах, таких как ext3 либо ext4, иноды создаются сходу совместно с ФС.
При разработке ФC количество инод определяется параметром -i команды mkfs. Чем больше это число, тем меньше инод
создается совместно с ФС. Если создавать ФС с параметром -O largefile, то это будет равносильно
заданию -i 1048576, т.е. 1 шт./Мб. А уменьшать -i можно прямо до размера блока, который обычно составляет 4 кб.

В жестких ссылках права доступа изменяются для файла и для ссылки одновременно.
В символических ссылках права файла и ссылки не связаны.
Жесткая ссылка это точка доступа к определенному inode. Если мы удаляем исходный файл,
то у нас все равно остается доступ к этому файлу и данным в нем.

Вот основные особенности символических ссылок:
    Могут ссылаться на файлы и каталоги;
    После удаления, перемещения или переименования файла становятся недействительными;
    Права доступа и номер inode отличаются от исходного файла;
    При изменении прав доступа для исходного файла, права на ссылку останутся неизменными;
    Можно ссылаться на другие разделы диска;
    Содержат только имя файла, а не его содержимое.

Вот основные особенности жестких ссылок:
    Работают только в пределах одной файловой системы;
    Нельзя ссылаться на каталоги;
    Имеют ту же информацию inode и набор разрешений что и у исходного файла;
    Разрешения на ссылку изменяться при изменении разрешений файла;
    Можно перемещать и переименовывать и даже удалять файл без вреда ссылке

ln опции файл_источник файл_ссылки
Рассмотрим опции утилиты:
    -d - разрешить создавать жесткие ссылки для директорий суперпользователю;
    -f - удалять существующие ссылки;
    -i - спрашивать нужно ли удалять существующие ссылки;
    -P - создать жесткую ссылку;
    -r - создать символическую ссылку с относительным путем к файлу;
    -s - создать символическую ссылку.
Применение: копирование директории без копирования(например при обновлении системы)
защита от удаления файла, ссылка на определенную библиотеку.

10) Работа с правами и разрешениями файлов и папок
chmod ugo+rwx file
chown user:new_group directory/ изменить владельца и группу владельца
usermod -G new_group test добавить пользователя тест в группу new_group,
не изменяя его группу по умолчанию.
chmod -R - изменение прав для директории и всех вложенных файлов
newgrp new_group - меняет первичную группу для текущего пользователя
chmod -R g+X directory1/ - разрешает открывать папки внутри директории, но не дает
право на исполнение файлов
Цифровое исполнение прав:
x-1, w-2, r-4

suid, sgid, t-bit
suid(set user id) - позволяет запустить файл с правами владельца файла, независимо от того
какой пользователь запускает файл (rws.r-x.r--)
chmod u+s - установка бита suid
chmod 4777 - установка бита suid
sgid аналогичер suid только с правами группы владельца
chmod g+s - установка бита sgid
chmod 2777 - установка бита sgid
chmod 6777 - установка бита suid и sgid
t-bit (sticky bit) - запрещает удалять, даже если полные права всем кроме владельца
chmod +t - устанвливает sticky bit
chmod 1777 - устанвливает sticky bit
chmod 7777 - устанвливает sticky bit, suid и sgid

umask устанавливает права доступа по умолчанию только для текущей сессии логин оболочки
чтоб маска была постоянной, надо править конфиг bashrc
в umask указываются права, которые нужно забрать
Пример: 0022 - это права 755
Для директрорий вычитается из 777, из файлов из 666.
exec bash - перезапуск bash
Глобальные настройки в /etc/bashrc

11) Использование системной документации man, info, и файлы в /usr/share/doc
man - подробное описание программ
man passwd - информация о команде, 1 секция
man 5 passwd - информация о файле passwd, 5 секция из 9
apropos passwd - выводит результаты, подходящие под команду passwd
mandb - обновить бд man
info работает в более современных дистрибутивах, ищет в файлах /usr/share/info
если в папке /usr/share/info не представлено руководство, то откроется man.
в info листаются страницы клавишами B и N, а T переводит к первой странице
Одиночная команда info открывает текстовую утилиту, где можно полазить посмотреть мануалы.
Файлы в /usr/share/doc содержит инструкции к программам, не по умолчанию.
man и info для программ по умолчанию
Команда locate ищет файлы по БД, которая обновляется автоматически раз в день,
или командой updatedb.
which - показвает путь к исполняемому файлу команды
whatis - показывает файлы с мануалами для команды
whereis - вывводит информацию о всех файлах программы
В centos RPM пакеты.
rpm -qd passwd - выводит все документы с информацией о программе passwd

find /directory -name name - ищет в директории по имени файла
find /directory -user root - ищет файлы, где root владелец
find /directory -mtime -3 - ищет файлы, которые были изменены в последние 3 дня
find /directory -mtime +3 - ищет файлы, которые были изменены более 3 дней назад
-type f - ищет только файлы
-exec command {} \; - выполняет команду со всеми файлами, которые найдены

